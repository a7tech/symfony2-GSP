<?php

namespace App\InvoiceBundle\Entity;

use App\CoreBundle\Entity\EntityRepository;
use App\ProjectBundle\Entity\Category;
use App\ProjectBundle\Entity\ContractCategory;
use App\ProjectBundle\Entity\Project;

/**
 * SaleOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SaleOrderRepository extends EntityRepository
{

    public function getDefaultQueryBuilder($visible = true)
    {
        $query_builder = parent::getDefaultQueryBuilder();
        if($visible !== null){
            $query_builder->andWhere($this->column('isVisible').' = :visible')
                    ->setParameter('visible', $visible);
        }

        return $query_builder;
    }

    /**
     * @param Project  $project
     * @param ContractCategory $category
     *
     * @return SaleOrder|null
     */
    public function getByProjectCategory(Project $project, ContractCategory $category)
    {
        $query_builder = $this->getDefaultQueryBuilder(null);
        $query_builder->andWhere($this->column('project').' = :project')
                        ->andWhere($this->column('projectCategory').' = :category')
                ->setParameter('project', $project)
                ->setParameter('category', $category);

        return $query_builder->getQuery()->getOneOrNullResult();
    }

    /**
     * @param Project $project
     * @param null    $visible
     *
     * @return SaleOrder|null
     */
    public function getAllByProject(Project $project, $visible = null)
    {
        $query_builder = $this->getDefaultQueryBuilder($visible);
        $query_builder->andWhere($this->column('project').' = :project')
                ->setParameter('project', $project);

        return $query_builder->getQuery()->getResult();
    }

    /**
     * @param null $visible
     * @return SaleOrder
     */
    public function getAllProjectInvoices($visible = null)
    {
        $query_builder = $this->getDefaultQueryBuilder($visible);
        $query_builder->andWhere($this->column('project').' IS NOT NULL');

        return $query_builder->getQuery()->getResult();
    }

    public function getQueryBuilderByCriteria(array $criteria = array())
    {
        $qb = parent::getQueryBuilderByCriteria($criteria);

        if (isset($criteria['projectId']) && $criteria['projectId'] !== '' && $criteria['projectId'] !== null) {
            if ($criteria['projectId'] === 'all_projects') {
                $qb
                        ->andWhere($this->column('isVisible') . ' = :visible')
                        ->andWhere($this->column('project') . ' IS NOT NULL')
                        ->setParameter('visible', true)
                ;
            } else {
                $qb
                        ->andWhere($this->column('isVisible') . ' = :visible')
                        ->andWhere($this->column('project') . ' = :project')
                        ->setParameter('visible', true)
                        ->setParameter('project', $criteria['projectId']);
                ;
            }
        }

        return $qb
                        ->leftJoin($this->column('customerCompany'), 'customerCompany')
                        ->leftJoin($this->column('vendor'), 'vendor')
                        ->leftJoin($this->column('vendorCompany'), 'vendorCompany')
        ;
    }

}