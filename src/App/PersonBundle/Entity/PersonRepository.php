<?php

namespace App\PersonBundle\Entity;

use App\CoreBundle\Entity\EntityRepository;
//use Doctrine\ORM\EntityRepository;

/**
 * PersonImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonRepository extends EntityRepository
{
    public function getCustomerShippingAddress($companyId) {

        $em = $this->_em;
        $result = array();
        $q = $em->createQuery('Select a From App\AddressBundle\Entity\Address a
                                            Inner join a.persons c
                                            Where a.isShipping=1
                                            And c.id='.$companyId);
        $res = $q->getResult();
        $result = $this->trasformData($res);
        return $result;

    }

    public function getCustomerBillingAddress($companyId) {

        $em = $this->_em;
        $result = array();
        $q = $em->createQuery('Select a From App\AddressBundle\Entity\Address a
                                            Inner join a.persons c
                                            Where a.isBilling=1
                                            And c.id='.$companyId);
        $res = $q->getResult();
        $result = $this->trasformData($res);
        return $result;

    }

    private function trasformData($resultat) {
        $result = array();
        if(!empty($resultat)) {
            $i=0;
            foreach ($resultat as $res) {
                $result[$i]['id'] = $res->getId();
                $country = $res->getCountry();
                $result[$i]['country'] = empty($country) == true ? '' : $country->getName();
                $province = $res->getProvince();
                $result[$i]['province'] = empty($province) == true ? '' : $province->getName();
                $region = $res->getRegion();
                $result[$i]['region'] = empty($region) == true ? '' : $region->getName();
                $result[$i]['postcode'] = $res->getPostcode();
                $result[$i]['city'] = $res->getCity();
                $result[$i]['street'] = $res->getStreet();
                $result[$i]['building'] = $res->getBuilding();
                $result[$i]['suite'] = $res->getSuite();
                $result[$i]['po'] = $res->getPo();
                $result[$i]['contact'] = $res->getContact();
            }
        }

        return $result;
    }

    public function getCustomerByCompany($companyId) {

        $em = $this->_em;
        $res = [];

        $q = $em->createQuery('Select p From App\PersonBundle\Entity\Person p
                                        Inner Join p.employments e
                                        where e.company='.$companyId);
        $res = $q->getResult();
        return $res;
    }

    public function getDefaultQueryBuilder()
    {
        $query_builder = parent::getDefaultQueryBuilder();
        $query_builder->orderBy($this->column('firstName'), 'ASC');

        return $query_builder;
    }

    public function getNotAssignedPersonsQueryBuilder($excluded = null)
    {
        $query_builder = $this->getDefaultQueryBuilder();
        $query_builder->leftJoin($this->column('user'), 'User')
                     ->andWhere('User IS NULL');

        if($excluded !== null){
            $query_builder->orWhere('User = :excluded')
                            ->setParameter('excluded', $excluded);
        }

        return $query_builder;
    }
    
    public function getQueryBuilderByCriteria(array $criteria = array())
    {
        $qb = parent::getQueryBuilderByCriteria($criteria);

        return $qb
//                        ->leftJoin($this->column('personGroup'), 'personGroup')
//                        ->leftJoin($this->column('phones'), 'phones')
//                        ->leftJoin($this->column('addresses'), 'addresses')
//                        ->leftJoin('phones.phoneType', 'phoneType')
//                        ->leftJoin($this->column('employments'), 'employments')
//                        ->leftJoin($this->column('emails'), 'emails')
//                        ->add('select', 'personGroup', true)
//                        ->add('select', 'phones', true)
//                        ->add('select', 'phoneType', true)
//                        ->add('select', 'addresses', true)
//                        ->add('select', 'employments', true)
//                        ->add('select', 'emails', true)

        ;
    }

}
