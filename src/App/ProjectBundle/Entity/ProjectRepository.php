<?php

namespace App\ProjectBundle\Entity;

use App\CoreBundle\Entity\EntityRepository;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends EntityRepository
{

    const INVOICE_ON_DELIVERY     = 1;
    const INVOICE_BEFORE_DELIVERY = 2;

    public function getDefaultQueryBuilder()
    {
        $query_builder = parent::getDefaultQueryBuilder();
        $query_builder->orderBy($this->column('name'), 'asc');

        return $query_builder;
    }

    protected static $weekDaysList = [
        1 => 'Monday',
        2 => 'Tuesday',
        3 => 'Wednesday',
        4 => 'Thursday',
        5 => 'Friday',
        6 => 'Saturday',
        7 => 'Sunday'
    ];

    public static function getWeekDaysList()
    {
        return self::$weekDaysList;
    }

    protected static $invoiceDeliveryTypeList = [
        self::INVOICE_ON_DELIVERY     => 'On delivery (group of tasks)',
        self::INVOICE_BEFORE_DELIVERY => 'Before delivery (group of tasks)'
    ];

    public static function getInvoiceDeliveryTypeList()
    {
        return self::$invoiceDeliveryTypeList;
    }

    public function getPresetTasksByCategories()
    {
        $categoryTree = [];
        $categoryList = $this->_em->getRepository('AppProjectBundle:Category')->getList();
        $catId        = 0;

        foreach ($categoryList as $cat) {
            $resTasks = $this->_em->getRepository('AppTaskBundle:TaskPreset')->findBy(['category' => $cat->getId()], ['order' => 'ASC']);

            if (count($resTasks) > 0) {
                $tasks = $resTasks;
            } else {
                $tasks = [];
            }

            $categoryTree[$cat->getId()] = [
                'category' => $cat,
                'tasks'    => $tasks
            ];

            if ($cat->getLevel() == 0) {
                $catId = $cat->getId();
            }

            if (count($resTasks) > 0) {
                $row                  = $categoryTree[$catId];
                $row['hasTasks']      = true;
                $categoryTree[$catId] = $row;
            }
        }

        return $categoryTree;
    }

    public function getProjects()
    {
        $query_builder = $this->getDefaultQueryBuilder();
        $query_builder->andWhere($this->column('type') . ' = :type')
                ->setParameter('type', Project::TYPE_PROJECT);

        return $query_builder->getQuery()->getResult();
    }

    public function getQueryBuilderByCriteria(array $criteria = array())
    {
        $qb = parent::getQueryBuilderByCriteria($criteria);

        return $qb
                        ->leftJoin($this->column('currency'), 'currency')
                        ->leftJoin($this->column('client'), 'client')
                        ->leftJoin($this->column('owner'), 'owner')
                        ->leftJoin($this->column('accountProfile'), 'accountProfile')
                        ->leftJoin('client.person', 'clientPerson')
                        ->leftJoin('owner.person', 'ownerPerson')
        ;
    }

}