<?php

namespace App\ProjectBundle\Entity;

use App\AccountBundle\Entity\AccountProfile;
use App\CoreBundle\Entity\EntityRepository;
use App\ProjectBundle\Entity\ProjectOpportunity;

/**
 * ProjectOpportunityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectOpportunityRepository extends EntityRepository
{

    public function getOpportunityByAccountProfile($accountProfileId)
    {
        try {

            $qb = $this->_em->createQueryBuilder();

            $qb->select('po')
                    ->from('App\ProjectBundle\Entity\ProjectOpportunity', 'po')
                    ->where($qb->expr()->eq('po.accountProfile', ':accountProfileId'))
                    ->setParameter('accountProfileId', $accountProfileId)
                    ->addOrderBy('po.name', 'DESC')
            ;

            $query = $qb->getQuery();
            $data  = $query->getResult();

            foreach ($data as $val) {
                $res[$val->getId()] = $val->getName() . ' (Id ' . $val->getId() . ')';
            }

            return $res;
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw new Exception('Caught exception: ' . $e->getMessage());
        }
    }

    /**
     * @param AccountProfile $accountProfile
     * @param Project        $excludedProject
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getNotUsedOpportunitiesQueryBuilder(AccountProfile $accountProfile = null, Project $excludedProject = null)
    {
        $query_builder = $this->getDefaultQueryBuilder();

        $subquery = $this->getEntityManager()->createQueryBuilder();
        $subquery->from($this->getEntityName(), 'PO')
                ->select('PO')
                ->join('PO.project', 'Project');
        if ($excludedProject !== null) {
            $subquery->andWhere('Project <> :excludedProject');
            $query_builder->setParameter('excludedProject', $excludedProject);
        }

        $query_builder->andWhere($query_builder->expr()->notIn($this->column('id'), $subquery->getDQL()))
                ->orderBy($this->column('name'), 'asc');


        if ($accountProfile !== null) {
            $query_builder->andWhere($this->column('accountProfile') . ' = :accountProfile')
                    ->setParameter('accountProfile', $accountProfile);
        }

        $query_builder->join($this->column('milestone'), 'Milestone')
                ->andWhere('Milestone.status <> :status')
                ->setParameter('status', ProjectMilestone::STATUS_LOST);

        return $query_builder;
    }

    /**
     * @param AccountProfile $accountProfile
     * @param Project        $excludedProject
     *
     * @return array
     */
    public function getNotUsedOpportunities(AccountProfile $accountProfile = null, Project $excludedProject = null)
    {
        return $this->getNotUsedOpportunitiesQueryBuilder($accountProfile, $excludedProject)->getQuery()->getResult();
    }

    public function getQueryBuilderByCriteria(array $criteria = array())
    {
        $qb = parent::getQueryBuilderByCriteria($criteria);

        return $qb
                        ->leftJoin($this->column('accountProfile'), 'accountProfile')
                        ->leftJoin($this->column('owner'), 'owner')
                        ->leftJoin('owner.person', 'person')
                        ->leftJoin($this->column('milestone'), 'milestone')
                        ->leftJoin($this->column('currency'), 'currency')
                        ->leftJoin($this->column('client'), 'client')
                        ->leftJoin($this->column('project'), 'project')
        ;
    }

}