<?php

namespace App\TaskBundle\Entity;

use App\CoreBundle\Entity\EntityRepository;
use App\PersonBundle\Entity\Person;
use App\ProjectBundle\Entity\Category;
use App\ProjectBundle\Entity\Project;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository
{

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getDefaultQueryBuilder()
    {
        $query_builder = parent::getDefaultQueryBuilder();
        $query_builder->orderBy($this->column('startDate'), 'ASC');

        return $query_builder;
    }

    /**
     * Gets tasks in range
     *
     * @param \DateTime $startDate
     * @param \DateTime $endDate
     * @param Project $project
     * @param \App\PersonBundle\Entity\Person $person
     * @return QueryBuilder
     */
    public function getInRangeQueryBuilder(\DateTime $startDate, \DateTime $endDate, Project $project = null, Person $person = null)
    {
        $startDateColumn = $this->column('startDate');
        $endDateColumn   = $this->column('dueDate');

        $query_builder = $this->getDefaultQueryBuilder();
        $query_builder->andWhere($query_builder->expr()
                        ->orX($startDateColumn . ' >= :startDate AND ' . $startDateColumn . ' <= :endDate')
                        ->add($endDateColumn . ' >= :startDate AND ' . $endDateColumn . ' <= :endDate')
                )
                ->setParameter('startDate', $startDate)
                ->setParameter('endDate', $endDate);

        if ($project !== null) {
            $query_builder->andWhere($this->column('project') . ' = :project')
                    ->setParameter('project', $project);
        }

        if ($person !== null) {
            $query_builder->andWhere($this->column('assignedTo') . ' = :person')
                    ->setParameter('person', $person);
        }

        return $query_builder;
    }

    /**
     * @param \DateTime $startDate
     * @param \DateTime $endDate
     * @param Project $project
     * @param Person $person
     * @return array
     */
    public function getInRange(\DateTime $startDate, \DateTime $endDate, Project $project = null, Person $person = null)
    {
        return $this->getInRangeQueryBuilder($startDate, $endDate, $project, $person)->getQuery()->getResult();
    }

    public function getNotInvoicedExtraTasks(Project $project)
    {
        $query_builder = $this->getDefaultQueryBuilder();
        $query_builder->leftJoin($this->column('invoicesTasks'), 'InvoiceTask')
                ->andWhere($this->column('project') . ' = :project')
                ->andWhere($this->column('type') . ' = :type')
                ->andWhere('InvoiceTask IS NULL')
                ->orderBy($this->column('id'), 'asc')
                ->setParameter('project', $project)
                ->setParameter('type', Task::TYPE_ADJUSTMENT);

        return $query_builder->getQuery()->getResult();
    }

    public function getNotCreditedTasks(Project $project)
    {
        $usedQueryBuilder = $this->createQueryBuilder('Task2');
        $usedQueryBuilder->select('Task2.id')
            ->join('Task2.invoicesTasks', 'InvoiceTask2')
            ->join('InvoiceTask2.order', 'Invoice2')
            ->andWhere('Task2.project = :project')
            ->andWhere('Task2.status = :status')
            ->andWhere('Invoice2.isCredit = :credit')
            ->setParameter('project', $project)
            ->setParameter('status', Task::STATUS_CANCELLED)
            ->setParameter('credit', true);

        $used = $usedQueryBuilder->getQuery()->getResult();

        $query_builder = $this->getDefaultQueryBuilder();
        $query_builder->join($this->column('invoicesTasks'), 'InvoiceTask')
            ->join('InvoiceTask.order', 'Invoice')
            ->andWhere($this->column('project') . ' = :project')
            ->andWhere('Invoice.isCredit = :credit')
            ->andWhere('Invoice.isDraft = :isDraft')
            ->andWhere($this->column('status') . ' = :status')
            ->orderBy($this->column('id'), 'asc')
            ->setParameter('project', $project)
            ->setParameter('status', Task::STATUS_CANCELLED)
            ->setParameter('credit', false)
            ->setParameter('isDraft', false);

        if(count($used) > 0){
            $query_builder->andWhere($this->column('id') . ' NOT IN (:used)')
                ->setParameter('used', $used);
        }

        return $query_builder->getQuery()->getResult();
    }

    public function getProjectTasksQueryBuilder(Project $project)
    {
        $query_builder = $this->getDefaultQueryBuilder();
        $query_builder->andWhere($this->column('project') . ' = :project')
                ->setParameter('project', $project);

        return $query_builder;
    }

    public function getByCategory(Category $category, Project $project)
    {
        $query_builder = $this->getProjectTasksQueryBuilder($project);
        $query_builder->andWhere($this->column('category') . ' = :category')
                ->setParameter('category', $category)
                ->orderBy($this->column('order'), 'ASC');

        return $query_builder->getQuery()->getResult();
    }

    public function getWithInvoices(Project $project = null)
    {
        $query_builder = $project !== null ? $this->getProjectTasksQueryBuilder($project) : $this->getDefaultQueryBuilder();

        $query_builder->leftJoin($this->column('invoicesTasks'), 'InvoiceTask')
                ->leftJoin('InvoiceTask.order', 'SaleOrder')
                ->add('select', 'InvoiceTask', true)
                ->add('select', 'SaleOrder', true);

        return $query_builder->getQuery()->getResult();
    }

    public function getQueryBuilderByCriteria(array $criteria = array())
    {
        $qb = parent::getQueryBuilderByCriteria($criteria);

        if (isset($criteria['projectId']) && $criteria['projectId'] !== '' && $criteria['projectId'] !== null) {
            $qb
                    ->andWhere($this->column('project') . ' = :project')
                    ->setParameter('project', $criteria['projectId']);
            ;
        }

        return $qb
                        ->leftJoin($this->column('project'), 'project')
                        ->leftJoin($this->column('category'), 'category')
                        ->leftJoin($this->column('tracker'), 'tracker')
                        ->leftJoin($this->column('priority'), 'priority')
                        ->leftJoin($this->column('assignedTo'), 'assignedTo')
                        ->leftJoin($this->column('invoicesTasks'), 'InvoiceTask')
                        ->leftJoin('InvoiceTask.order', 'SaleOrder')
                        ->add('select', 'InvoiceTask', true)
                        ->add('select', 'SaleOrder', true)
        ;
    }

}