<?php

namespace App\CategoryBundle\Entity;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Gedmo\Tree\Strategy\ORM\Nested;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends NestedTreeRepository
{

    /**
     * getTreeList
     *
     * @return array
     */
    public function getList()
    {
        return $this->findBy(array(), array('lft' => 'ASC'));
    }

    public function increaseNextSiblingsPositions(Category $node, $position = null)
    {
        $qb = $this->createQueryBuilder('c')
                ->update()
                ->set('c.position', 'c.position + 1')
                ->where('c.level = ' . $node->getLevel())
                ->andWhere('c.rgt > ' . $node->getRightValue())
        ;

        if ($position !== null) {
            $qb->andWhere('c.position <= ' . $position);
        }

        if ($node->getLevel() === 0) {
            $qb->andWhere('c.parent IS NULL');
        } else {
            $qb->andWhere('c.parent = :parent')
                    ->setParameter('parent', $node->getParent());
        }

        return $qb->getQuery()
                        ->getResult();
    }

    public function decreaseNextSiblingsPositions(Category $node, $position = null)
    {
        $qb = $this->createQueryBuilder('c')
                ->update()
                ->set('c.position', 'c.position - 1')
                ->where('c.level = ' . $node->getLevel())
        ;

        if ($position !== null) {
            $qb->andWhere('c.position > ' . $position)
                    ->andWhere('c.position <= ' . \intval($position + 1));
        }

        if ($node->getLevel() === 0) {
            if ($node->getPosition() === 1) {
                $qb->andWhere('c.rgt >= ' . $node->getRightValue());
            } else {
                $qb->andWhere('c.rgt > ' . $node->getRightValue());
            }

            $qb->andWhere('c.parent IS NULL')
                    ->andWhere('c.id != ' . $node->getId())
            ;
        } else {
            $qb->andWhere('c.parent = :parent')
                    ->andWhere('c.rgt >= ' . $node->getRightValue())
                    ->andWhere('c.id != ' . $node->getId())
                    ->setParameter('parent', $node->getParent());
        }

        return $qb->getQuery()
                        ->getResult();
    }

    public function countRootNodes()
    {
        $qb = $this->createQueryBuilder('c')
                ->select('count(c.id)')
                ->where('c.parent IS NULL')
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countChildrenForNode($node, $idEntity)
    {
        $qb = $this->createQueryBuilder('c')
        ;

        if ($node === null) {
            $qb
                    ->select('count(c.id)')
                    ->where('c.parent IS NULL');
            if ($idEntity !== null) {
                $qb->andWhere('c.id != ' . $idEntity);
            }
        } else {
            $qb
                    ->select('count(children.id)')
                    ->where('c = :node')
                    ->leftJoin('c.children', 'children')
                    ->setParameter('node', $node);
            if ($idEntity !== null) {
                $qb->andWhere('children.id != ' . $idEntity);
            }
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * moveLeft
     * 
     */
    public function moveLeft(Category $node)
    {
        if ($parent = $node->getParent()) {
            $node->setParent($parent->getParent());
            $this->_em->persist($node);
            $this->_em->flush();

            $this->listener
                    ->getStrategy($this->_em, $this->getClassMetadata()->name)
                    ->updateNode($this->_em, $node, $parent, Nested::NEXT_SIBLING);
        }
    }

    /**
     * moveRight
     * 
     */
    public function moveRight(Category $node)
    {
        $prevSiblings = array_reverse($this->getPrevSiblings($node));
        if ($prevSiblings) {
            $newParent = $prevSiblings[0];

            $this->listener
                    ->getStrategy($this->_em, $this->getClassMetadata()->name)
                    ->updateNode($this->_em, $node, $newParent, Nested::FIRST_CHILD);

            $node->setParent($newParent);
            $this->_em->persist($node);
            $this->_em->flush();
        }
    }

}